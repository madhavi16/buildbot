# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### DEBUGGING

from buildbot import manhole
c['manhole'] = manhole.PasswordManhole("tcp:1234:interface=127.0.0.1","admin","passwd")

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("example-slave", "pass")]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of buildyard.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        'https://github.com/Eyescale/Buildyard.git',
        workdir='gitpoller-workdir', branch='master', gitbin='git',
        pollinterval=300))
c['change_source'].append(GitPoller('https://bbpteam.epfl.ch/reps/common/config.bbp.git',
        workdir='gitpoller-workdir', branch='master', gitbin='git', pollinterval=300))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

#from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import Nightly
#from buildbot.changes import Filter
c['schedulers'] = []
#c['schedulers'].append(SingleBranchScheduler(
 #                           name="all",
  #                          change_filter=Filter.ChangeFilter(branch='master'),
  #                          treeStableTimer=3*60,
  #                         builderNames=["runtests"]))
c['schedulers'].append(ForceScheduler(
                          name="force",
                           builderNames=["runtests"]))
c['schedulers'].append(Nightly(
		    name="runtests",
			    branch='master',
			    hour=12,
			    minute=14,
			    onlyIfChanged=True,
		    builderNames=["runtests"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

#from buildbot.scheduler import Try_Jobdir
#c['schedulers'].append(Try_Jobdir(
#					name='try'
#					builderNames=["runtests"],
#					jobdir="jobdir"))

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

factory = BuildFactory()
# check out the source
factory.addStep(Git(repourl='git@github.com:Eyescale/Buildyard.git', mode='full', submodules=True))
#factory.addStep(Git(repourl='git@bbpgit.epfl.ch/common/config.bbp.git', mode='full'))
# run the tests (note that this will require that 'trial' is installed)

factory.addStep(ShellCommand(command=["make", "RTNeuron"]))
#factory.addStep(ShellCommand(command=["make", "install"]))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    #BuilderConfig(name="runtests",
     # slavenames=["example-slave"],
      #factory=factory),
    #BuilderConfig(name="Nightly",
     #   slavenames=["example-slave"],
      #  factory=factory),
    BuilderConfig(name="runtests",
        slavenames=["example-slave"],
        factory=factory))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth
from buildbot.status.web.auth import BasicAuth

users = [('bluebrain','bluebrain')]
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(users),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg, change_hook_dialects={ 'github' : True}))
from buildbot.status import mail
m = mail.MailNotifier(fromaddr="madhavi.aita@kaust.edu.sa",
		      extraRecipients=["madhavi.aita@gmail.com"],
		      sendToInterestedUsers=False)
c['status'].append(m)

		
#from buildbot.status import words
#c['status'].append(words.IRC(host="irc.freenode.org", nick="bbtest", allowForce=True, channels=[{"channel": "#buildbot-test1"},
#	{"channel": "#buildbot-test2", "password": "dummy"}]))
# password="mypassword",
# notify_events={	
  #      'successToFailure': 1,
   #     'failureToSuccess': 1,
#	'exception': 1,
 #                    }

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Buildyard"
c['titleURL'] = "https://github.com/Eyescale/Buildyard.git"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"					

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
